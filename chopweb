#!/usr/bin/env python

# Copyright (c) 2014 The MITRE Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

#Chopshop

"""
TODO
    Need to add multi-threading support -- requires locking of smallest_discard object

"""


VERSION = "3.0-BETA"

import sys
import signal
import os
import nids
import fileinput
from optparse import OptionParser
from threading import Thread
from threading import Lock

#Python Version Check
version = sys.version_info
version = float(str(version[0]) + "." + str(version[1]))

if version < 2.6:
    print "Python Minimum Version 2.6 required"
    sys.exit(-1)

from multiprocessing import Process, Queue as mQueue
import Queue
import time

try:
    from mod_pywebsocket import standalone
except:
    print "mod_pywebsocket required"
    sys.exit(-1)

#Chopshop Working Directory -- defaults to where script exists
CHOPSHOP_WD = os.path.realpath(os.path.dirname(os.path.realpath(sys.argv[0])))

sys.path.append(CHOPSHOP_WD + '/shop')

##### DEBUG CODE #####
### This is meant to be used for the sole purpose of chopshop core development
### DO NOT ENABLE THIS UNLESS YOU ARE WORKING ON THE CORE OR SHOP COMPONENTS
import ChopShopDebug as CSD
#CSD.enable_debug()
#####

from ChopException import ChopConfigException
from ChopConfig import ChopConfig
from ChopLib import ChopLib
from ChopWebServer import ChopWebUi
global choplib
global chopweb

def signal_handler(signal, frame):
    try:
        chopweb.stop()
    except:
        pass

    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)


def main():
    #global choplib
    global chopweb


    chopconfig = ChopConfig()
    chopweb = ChopWebUi()

    optparser = OptionParser(usage='usage: %prog [options] ["bpf filter"] "list ; of ; modules"')
    optparser.add_option("-a", "--host", action="store", dest="host", type="string",
        default='',help="Host/Address to listen on")
    optparser.add_option("-c", "--configfile", action="store", dest="configfile",
                         type="string", default=None, help="Import a config file")
    optparser.add_option("-C", "--saveconfig", action="store", dest="saveconfig",
                         type="string", default=None, help="Save current arguments to a config file")
    optparser.add_option("-p", "--port", action="store", dest="port", type="int",
        default=8080,help="Port to listen on")
    optparser.add_option("-v", "--version", action="store_true", dest="version",
        default=False,help="print version and exit")

    (options, args) = optparser.parse_args()

    # the chopconfig object requires that a module list exist but
    # chopweb doesn't take a module list on the command line.  We
    # should address this down the road to make chopconfig work for
    # ChopWeb and ChopShop but for now I'm just taking it out
    
    '''
    try:
        chopconfig.parse_opts(options, args)
    except ChopConfigException, e:
        print e
        sys.exit(1)
    '''

    chopweb.server_host = options.host
    chopweb.port = options.port
    if chopweb.server_host:
        print "Starting chopweb on %s:%s" % (chopweb.server_host, chopweb.port)
    else:
        print "Starting chopweb on localhost:%s" % chopweb.port
    #chopweb.bind(choplib)
    chopweb.start()
    #chopweb should run choplib.start()

    while chopweb.is_alive():
        time.sleep(.1)
        
if __name__ == '__main__':
    main()
